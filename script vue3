// src/audio/instrument_player.ts
export function playInstrument(name: string) {
  console.log(`üéª Playing ${name}...`);
  const context = new (global.AudioContext || (typeof window !== 'undefined' && window.AudioContext) || require('web-audio-api').AudioContext)();
  const osc = context.createOscillator();
  osc.type = 'sawtooth';
  osc.frequency.setValueAtTime(528, context.currentTime);
  osc.connect(context.destination);
  osc.start();
  osc.stop(context.currentTime + 2);
}

// src/audio/ble_instrument_trigger.ts
import noble from '@abandonware/noble';
import { playInstrument } from './instrument_player';

const TARGET_NAME = "CrownBLE";

console.log("üì° BLE Trigger Module Active");

noble.on('stateChange', (state) => {
  if (state === 'poweredOn') {
    noble.startScanning([], true);
  } else {
    noble.stopScanning();
  }
});

noble.on('discover', (peripheral) => {
  const name = peripheral.advertisement.localName || "Unknown";

  if (name.includes(TARGET_NAME)) {
    console.log(`üé∂ Crown device detected: ${name}`);
    playInstrument("Thunderspine Harp");
    noble.stopScanning();
  }
});

<!-- src/audio/AudioMaker.vue -->
<template>
  <div class="p-6 bg-gray-900 text-white">
    <h2 class="text-xl font-bold mb-4">üéß Crown Audio Generator</h2>

    <input v-model="note" placeholder="Note (e.g., A4)" class="p-2 text-black" />
    <input v-model.number="duration" type="number" class="p-2 text-black ml-2" />
    <button @click="addNote" class="p-2 bg-purple-600 ml-2 rounded">Add Note</button>
    <button @click="playNotes" class="p-2 bg-green-600 ml-2 rounded">‚ñ∂Ô∏è Play</button>

    <ul class="mt-4 ml-4 list-disc">
      <li v-for="(n, i) in notes" :key="i">{{ n.note }} - {{ n.duration }}s</li>
    </ul>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue';

const note = ref('');
const duration = ref(1);
const notes = ref<{ note: string; duration: number }[]>([]);

function addNote() {
  if (note.value && duration.value > 0) {
    notes.value.push({ note: note.value, duration: duration.value });
    note.value = '';
    duration.value = 1;
  }
}

function playNotes() {
  const context = new (window.AudioContext || window.webkitAudioContext)();
  let time = context.currentTime;

  notes.value.forEach(({ note, duration }) => {
    const oscillator = context.createOscillator();
    oscillator.type = 'sine';
    oscillator.frequency.setValueAtTime(noteToFreq(note), time);

    const gain = context.createGain();
    gain.gain.setValueAtTime(0.1, time);

    oscillator.connect(gain);
    gain.connect(context.destination);

    oscillator.start(time);
    oscillator.stop(time + duration);

    time += duration;
  });
}

function noteToFreq(note: string): number {
  const A4 = 440;
  const NOTES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];
  const match = note.match(/^([A-G]#?)(\d)$/);
  if (!match) return A4;

  const [, pitch, octaveStr] = match;
  const octave = parseInt(octaveStr);
  const n = NOTES.indexOf(pitch);
  const semitones = n + (octave - 4) * 12;
  return A4 * Math.pow(2, semitones / 12);
}
</script>

// src/design/anime_namer.ts
const names = ['Kai', 'Sora', 'Rin', 'Yami', 'Noir', 'Shiro', 'Akira', 'Misaki'];
const archetypes = ['Flame Oracle', 'Cyber Prophet', 'Void Ronin', 'Sky Healer'];

export function generateAnimeName() {
  const name = names[Math.floor(Math.random() * names.length)];
  const role = archetypes[Math.floor(Math.random() * archetypes.length)];
  return `${name} the ${role}`;
}

// src/design/clothes_designer.ts
interface Outfit {
  name: string;
  materials: string[];
  sigilPlacement: string;
}

export function createOutfit(): Outfit {
  return {
    name: 'Ashen Crown Trench',
    materials: ['hempcrete thread', 'plasma silk', 'shadowsteel'],
    sigilPlacement: 'Back spine + palms + left boot'
  };
}

// src/design/instrument_designer.ts
interface Instrument {
  name: string;
  form: string;
  frequencyRange: [number, number];
  powerSource: string;
}

export function generateInstrument(): Instrument {
  return {
    name: 'Thunderspine Harp',
    form: 'arc-shaped carbonized hemp with chrome strings',
    frequencyRange: [432, 888],
    powerSource: 'AGI Pulse Core + user‚Äôs heartbeat'
  };
}

// cleanup/repo_cleaner.ts
import fs from 'fs';
import path from 'path';

const TRASH = ['.DS_Store', '.log', '.pyc', 'temp'];

export function cleanRepo(root: string) {
  let removed = 0;
  function walk(dir: string) {
    fs.readdirSync(dir).forEach(file => {
      const full = path.join(dir, file);
      if (fs.statSync(full).isDirectory()) {
        walk(full);
      } else if (TRASH.some(trash => file.includes(trash))) {
        fs.unlinkSync(full);
        removed++;
      }
    });
  }
  walk(root);
  console.log(`üßπ Cleaned ${removed} temp/trash files.`);
}

# src/memory/agi_memory.yaml
session_id: crown-77f-omega
events:
  - type: seal.activate
    source: TactionUI.vue
    verified: true
    timestamp: 2025-06-25T20:17:00Z
  - type: bio.verify
    user: MARIO
    passed: true
    timestamp: 2025-06-25T20:17:05Z

